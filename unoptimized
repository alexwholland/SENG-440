	.arch armv7-a
	.eabi_attribute 28, 1
	.eabi_attribute 20, 1
	.eabi_attribute 21, 1
	.eabi_attribute 23, 3
	.eabi_attribute 24, 1
	.eabi_attribute 25, 1
	.eabi_attribute 26, 2
	.eabi_attribute 30, 6
	.eabi_attribute 34, 1
	.eabi_attribute 18, 4
	.file	"unoptimized.c"
	.text
	.align	2
	.global	clamp
	.arch armv7-a
	.syntax unified
	.arm
	.fpu vfpv3-d16
	.type	clamp, %function
clamp:
	@ args = 0, pretend = 0, frame = 8
	@ frame_needed = 1, uses_anonymous_args = 0
	@ link register save eliminated.
	str	fp, [sp, #-4]!
	add	fp, sp, #0
	sub	sp, sp, #12
	vstr.32	s0, [fp, #-8]
	vldr.32	s15, [fp, #-8]
	vcmpe.f32	s15, #0
	vmrs	APSR_nzcv, FPSCR
	bpl	.L11
	mov	r3, #0
	b	.L8
.L11:
	vldr.32	s15, [fp, #-8]
	vldr.32	s14, .L13
	vcmpe.f32	s15, s14
	vmrs	APSR_nzcv, FPSCR
	ble	.L12
	mov	r3, #0
	movt	r3, 17279
	b	.L8
.L12:
	ldr	r3, [fp, #-8]	@ float
.L8:
	vmov	s15, r3
	vmov.f32	s0, s15
	add	sp, fp, #0
	@ sp needed
	ldr	fp, [sp], #4
	bx	lr
.L14:
	.align	2
.L13:
	.word	1132396544
	.size	clamp, .-clamp
	.align	2
	.global	convert_to_ycc
	.syntax unified
	.arm
	.fpu vfpv3-d16
	.type	convert_to_ycc, %function
convert_to_ycc:
	@ args = 0, pretend = 0, frame = 64
	@ frame_needed = 1, uses_anonymous_args = 0
	push	{fp, lr}
	add	fp, sp, #4
	sub	sp, sp, #64
	str	r0, [fp, #-48]
	ldrb	r3, [fp, #-48]	@ zero_extendqisi2
	vmov	s15, r3	@ int
	vcvt.f32.u32	s14, s15
	vldr.32	s13, .L17
	vdiv.f32	s15, s14, s13
	vstr.32	s15, [fp, #-8]
	ldrb	r3, [fp, #-47]	@ zero_extendqisi2
	vmov	s15, r3	@ int
	vcvt.f32.u32	s14, s15
	vldr.32	s13, .L17
	vdiv.f32	s15, s14, s13
	vstr.32	s15, [fp, #-12]
	ldrb	r3, [fp, #-46]	@ zero_extendqisi2
	vmov	s15, r3	@ int
	vcvt.f32.u32	s14, s15
	vldr.32	s13, .L17
	vdiv.f32	s15, s14, s13
	vstr.32	s15, [fp, #-16]
	vldr.32	s15, [fp, #-8]
	vldr.32	s14, .L17+4
	vmul.f32	s14, s15, s14
	vldr.32	s15, [fp, #-12]
	vldr.32	s13, .L17+8
	vmul.f32	s15, s15, s13
	vadd.f32	s14, s14, s15
	vldr.32	s15, [fp, #-16]
	vldr.32	s13, .L17+12
	vmul.f32	s15, s15, s13
	vadd.f32	s15, s14, s15
	vstr.32	s15, [fp, #-40]
	vldr.32	s15, [fp, #-8]
	vldr.32	s14, .L17+16
	vmul.f32	s14, s15, s14
	vldr.32	s15, [fp, #-12]
	vldr.32	s13, .L17+20
	vmul.f32	s15, s15, s13
	vsub.f32	s14, s14, s15
	vldr.32	s15, [fp, #-16]
	vmov.f32	s13, #5.0e-1
	vmul.f32	s15, s15, s13
	vadd.f32	s15, s14, s15
	vstr.32	s15, [fp, #-36]
	vldr.32	s15, [fp, #-8]
	vmov.f32	s14, #5.0e-1
	vmul.f32	s14, s15, s14
	vldr.32	s15, [fp, #-12]
	vldr.32	s13, .L17+24
	vmul.f32	s15, s15, s13
	vsub.f32	s14, s14, s15
	vldr.32	s15, [fp, #-16]
	vldr.32	s13, .L17+28
	vmul.f32	s15, s15, s13
	vsub.f32	s15, s14, s15
	vstr.32	s15, [fp, #-32]
	vldr.32	s15, [fp, #-40]
	vldr.32	s14, .L17+32
	vmul.f32	s15, s15, s14
	vmov.f32	s14, #1.6e+1
	vadd.f32	s15, s15, s14
	vmov.f32	s0, s15
	bl	clamp
	vmov.f32	s15, s0
	vstr.32	s15, [fp, #-40]
	vldr.32	s15, [fp, #-36]
	vldr.32	s14, .L17+36
	vmul.f32	s15, s15, s14
	vldr.32	s14, .L17+40
	vadd.f32	s15, s15, s14
	vmov.f32	s0, s15
	bl	clamp
	vmov.f32	s15, s0
	vstr.32	s15, [fp, #-36]
	vldr.32	s15, [fp, #-32]
	vldr.32	s14, .L17+36
	vmul.f32	s15, s15, s14
	vldr.32	s14, .L17+40
	vadd.f32	s15, s15, s14
	vmov.f32	s0, s15
	bl	clamp
	vmov.f32	s15, s0
	vstr.32	s15, [fp, #-32]
	sub	r3, fp, #28
	sub	r2, fp, #40
	ldm	r2, {r0, r1, r2}
	stm	r3, {r0, r1, r2}
	ldr	r1, [fp, #-28]	@ float
	ldr	r2, [fp, #-24]	@ float
	ldr	r3, [fp, #-20]	@ float
	vmov	s13, r1
	vmov	s14, r2
	vmov	s15, r3
	vmov.f32	s0, s13
	vmov.f32	s1, s14
	vmov.f32	s2, s15
	sub	sp, fp, #4
	@ sp needed
	pop	{fp, pc}
.L18:
	.align	2
.L17:
	.word	1132396544
	.word	1050220167
	.word	1058424226
	.word	1038710997
	.word	-1104361183
	.word	1051302767
	.word	1054236230
	.word	1034323688
	.word	1130037248
	.word	1130364928
	.word	1124073472
	.size	convert_to_ycc, .-convert_to_ycc
	.align	2
	.global	downsample_ycc
	.syntax unified
	.arm
	.fpu vfpv3-d16
	.type	downsample_ycc, %function
downsample_ycc:
	@ args = 4, pretend = 0, frame = 24
	@ frame_needed = 1, uses_anonymous_args = 0
	push	{fp, lr}
	add	fp, sp, #4
	sub	sp, sp, #24
	str	r0, [fp, #-16]
	str	r1, [fp, #-20]
	str	r2, [fp, #-24]
	str	r3, [fp, #-28]
	mov	r0, #24
	bl	malloc
	mov	r3, r0
	str	r3, [fp, #-8]
	ldr	r3, [fp, #-20]
	ldr	r2, [r3]	@ float
	ldr	r3, [fp, #-8]
	str	r2, [r3]	@ float
	ldr	r3, [fp, #-24]
	ldr	r2, [r3]	@ float
	ldr	r3, [fp, #-8]
	str	r2, [r3, #4]	@ float
	ldr	r3, [fp, #-28]
	ldr	r2, [r3]	@ float
	ldr	r3, [fp, #-8]
	str	r2, [r3, #8]	@ float
	ldr	r3, [fp, #4]
	ldr	r2, [r3]	@ float
	ldr	r3, [fp, #-8]
	str	r2, [r3, #12]	@ float
	ldr	r3, [fp, #-20]
	vldr.32	s14, [r3, #4]
	ldr	r3, [fp, #-24]
	vldr.32	s15, [r3, #4]
	vadd.f32	s14, s14, s15
	ldr	r3, [fp, #-28]
	vldr.32	s15, [r3, #4]
	vadd.f32	s14, s14, s15
	ldr	r3, [fp, #4]
	vldr.32	s15, [r3, #4]
	vadd.f32	s14, s14, s15
	vmov.f32	s13, #4.0e+0
	vdiv.f32	s15, s14, s13
	ldr	r3, [fp, #-8]
	vstr.32	s15, [r3, #16]
	ldr	r3, [fp, #-20]
	vldr.32	s14, [r3, #8]
	ldr	r3, [fp, #-24]
	vldr.32	s15, [r3, #8]
	vadd.f32	s14, s14, s15
	ldr	r3, [fp, #-28]
	vldr.32	s15, [r3, #8]
	vadd.f32	s14, s14, s15
	ldr	r3, [fp, #4]
	vldr.32	s15, [r3, #8]
	vadd.f32	s14, s14, s15
	vmov.f32	s13, #4.0e+0
	vdiv.f32	s15, s14, s13
	ldr	r3, [fp, #-8]
	vstr.32	s15, [r3, #20]
	ldr	r2, [fp, #-16]
	ldr	r3, [fp, #-8]
	mov	ip, r2
	mov	lr, r3
	ldmia	lr!, {r0, r1, r2, r3}
	stmia	ip!, {r0, r1, r2, r3}
	ldm	lr, {r0, r1}
	stm	ip, {r0, r1}
	ldr	r0, [fp, #-16]
	sub	sp, fp, #4
	@ sp needed
	pop	{fp, pc}
	.size	downsample_ycc, .-downsample_ycc
	.align	2
	.global	upsample_ycc
	.syntax unified
	.arm
	.fpu vfpv3-d16
	.type	upsample_ycc, %function
upsample_ycc:
	@ args = 0, pretend = 0, frame = 56
	@ frame_needed = 1, uses_anonymous_args = 0
	push	{fp, lr}
	add	fp, sp, #4
	sub	sp, sp, #56
	str	r0, [fp, #-56]
	str	r1, [fp, #-60]
	ldr	r3, [fp, #-60]
	ldr	r3, [r3]	@ float
	str	r3, [fp, #-52]	@ float
	ldr	r3, [fp, #-60]
	ldr	r3, [r3, #4]	@ float
	str	r3, [fp, #-40]	@ float
	ldr	r3, [fp, #-60]
	ldr	r3, [r3, #8]	@ float
	str	r3, [fp, #-28]	@ float
	ldr	r3, [fp, #-60]
	ldr	r3, [r3, #12]	@ float
	str	r3, [fp, #-16]	@ float
	ldr	r3, [fp, #-60]
	ldr	r3, [r3, #16]	@ float
	str	r3, [fp, #-48]	@ float
	ldr	r3, [fp, #-60]
	ldr	r3, [r3, #16]	@ float
	str	r3, [fp, #-36]	@ float
	ldr	r3, [fp, #-60]
	ldr	r3, [r3, #16]	@ float
	str	r3, [fp, #-24]	@ float
	ldr	r3, [fp, #-60]
	ldr	r3, [r3, #16]	@ float
	str	r3, [fp, #-12]	@ float
	ldr	r3, [fp, #-60]
	ldr	r3, [r3, #20]	@ float
	str	r3, [fp, #-44]	@ float
	ldr	r3, [fp, #-60]
	ldr	r3, [r3, #20]	@ float
	str	r3, [fp, #-32]	@ float
	ldr	r3, [fp, #-60]
	ldr	r3, [r3, #20]	@ float
	str	r3, [fp, #-20]	@ float
	ldr	r3, [fp, #-60]
	ldr	r3, [r3, #20]	@ float
	str	r3, [fp, #-8]	@ float
	ldr	r3, [fp, #-56]
	mov	lr, r3
	sub	ip, fp, #52
	ldmia	ip!, {r0, r1, r2, r3}
	stmia	lr!, {r0, r1, r2, r3}
	ldmia	ip!, {r0, r1, r2, r3}
	stmia	lr!, {r0, r1, r2, r3}
	ldm	ip, {r0, r1, r2, r3}
	stm	lr, {r0, r1, r2, r3}
	ldr	r0, [fp, #-56]
	sub	sp, fp, #4
	@ sp needed
	pop	{fp, pc}
	.size	upsample_ycc, .-upsample_ycc
	.align	2
	.global	convert_to_rgb
	.syntax unified
	.arm
	.fpu vfpv3-d16
	.type	convert_to_rgb, %function
convert_to_rgb:
	@ args = 0, pretend = 0, frame = 16
	@ frame_needed = 1, uses_anonymous_args = 0
	push	{fp, lr}
	add	fp, sp, #4
	sub	sp, sp, #16
	str	r0, [fp, #-16]
	mov	r0, #3
	bl	malloc
	mov	r3, r0
	str	r3, [fp, #-8]
	ldr	r3, [fp, #-16]
	vldr.32	s15, [r3]
	vmov.f32	s14, #1.6e+1
	vsub.f32	s15, s15, s14
	vldr.32	s14, .L25
	vmul.f32	s14, s15, s14
	ldr	r3, [fp, #-16]
	vldr.32	s15, [r3, #8]
	vldr.32	s13, .L25+4
	vsub.f32	s15, s15, s13
	vldr.32	s13, .L25+8
	vmul.f32	s15, s15, s13
	vadd.f32	s15, s14, s15
	vmov.f32	s0, s15
	bl	clamp
	vmov.f32	s15, s0
	vcvt.u32.f32	s15, s15
	vstr.32	s15, [fp, #-20]	@ int
	ldr	r3, [fp, #-20]
	uxtb	r2, r3
	ldr	r3, [fp, #-8]
	strb	r2, [r3]
	ldr	r3, [fp, #-16]
	vldr.32	s15, [r3]
	vmov.f32	s14, #1.6e+1
	vsub.f32	s15, s15, s14
	vldr.32	s14, .L25
	vmul.f32	s14, s15, s14
	ldr	r3, [fp, #-16]
	vldr.32	s15, [r3, #8]
	vldr.32	s13, .L25+4
	vsub.f32	s15, s15, s13
	vldr.32	s13, .L25+12
	vmul.f32	s15, s15, s13
	vsub.f32	s14, s14, s15
	ldr	r3, [fp, #-16]
	vldr.32	s15, [r3, #4]
	vldr.32	s13, .L25+4
	vsub.f32	s15, s15, s13
	vldr.32	s13, .L25+16
	vmul.f32	s15, s15, s13
	vsub.f32	s15, s14, s15
	vmov.f32	s0, s15
	bl	clamp
	vmov.f32	s15, s0
	vcvt.u32.f32	s15, s15
	vstr.32	s15, [fp, #-20]	@ int
	ldr	r3, [fp, #-20]
	uxtb	r2, r3
	ldr	r3, [fp, #-8]
	strb	r2, [r3, #1]
	ldr	r3, [fp, #-16]
	vldr.32	s15, [r3]
	vmov.f32	s14, #1.6e+1
	vsub.f32	s15, s15, s14
	vldr.32	s14, .L25
	vmul.f32	s14, s15, s14
	ldr	r3, [fp, #-16]
	vldr.32	s15, [r3, #4]
	vldr.32	s13, .L25+4
	vsub.f32	s15, s15, s13
	vldr.32	s13, .L25+20
	vmul.f32	s15, s15, s13
	vadd.f32	s15, s14, s15
	vmov.f32	s0, s15
	bl	clamp
	vmov.f32	s15, s0
	vcvt.u32.f32	s15, s15
	vstr.32	s15, [fp, #-20]	@ int
	ldr	r3, [fp, #-20]
	uxtb	r2, r3
	ldr	r3, [fp, #-8]
	strb	r2, [r3, #2]
	ldr	r2, [fp, #-8]
	sub	r3, fp, #12
	ldrh	r1, [r2]	@ unaligned
	ldrb	r2, [r2, #2]
	strh	r1, [r3]	@ unaligned
	strb	r2, [r3, #2]
	mov	r3, #0
	ldrb	r2, [fp, #-12]	@ zero_extendqisi2
	bfi	r3, r2, #0, #8
	ldrb	r2, [fp, #-11]	@ zero_extendqisi2
	bfi	r3, r2, #8, #8
	ldrb	r2, [fp, #-10]	@ zero_extendqisi2
	bfi	r3, r2, #16, #8
	mov	r0, r3
	sub	sp, fp, #4
	@ sp needed
	pop	{fp, pc}
.L26:
	.align	2
.L25:
	.word	1066728948
	.word	1124073472
	.word	1070352826
	.word	1062215877
	.word	1053307175
	.word	1073817321
	.size	convert_to_rgb, .-convert_to_rgb
	.align	2
	.global	rgb_to_ycc
	.syntax unified
	.arm
	.fpu vfpv3-d16
	.type	rgb_to_ycc, %function
rgb_to_ycc:
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 1, uses_anonymous_args = 0
	push	{r4, fp, lr}
	add	fp, sp, #8
	sub	sp, sp, #44
	str	r0, [fp, #-40]
	str	r1, [fp, #-44]
	str	r2, [fp, #-48]
	ldr	r3, [fp, #-44]
	ldr	r2, [fp, #-48]
	mul	r3, r2, r3
	str	r3, [fp, #-24]
	mov	r0, #4
	bl	malloc
	mov	r3, r0
	str	r3, [fp, #-28]
	ldr	r2, [fp, #-24]
	mov	r3, r2
	lsl	r3, r3, #1
	add	r3, r3, r2
	lsl	r3, r3, #2
	mov	r0, r3
	bl	malloc
	mov	r3, r0
	mov	r2, r3
	ldr	r3, [fp, #-28]
	str	r2, [r3]
	mov	r3, #0
	str	r3, [fp, #-16]
	b	.L28
.L31:
	mov	r3, #0
	str	r3, [fp, #-20]
	b	.L29
.L30:
	ldr	r3, [fp, #-16]
	ldr	r2, [fp, #-48]
	mul	r3, r2, r3
	str	r3, [fp, #-32]
	ldr	r3, [fp, #-40]
	ldr	r2, [r3]
	ldr	r1, [fp, #-32]
	ldr	r3, [fp, #-20]
	add	r3, r1, r3
	mov	r1, r3
	mov	r3, r1
	lsl	r3, r3, #1
	add	r3, r3, r1
	add	r2, r2, r3
	ldr	r3, [fp, #-28]
	ldr	r1, [r3]
	ldr	r0, [fp, #-32]
	ldr	r3, [fp, #-20]
	add	r3, r0, r3
	mov	r0, r3
	mov	r3, r0
	lsl	r3, r3, #1
	add	r3, r3, r0
	lsl	r3, r3, #2
	add	r4, r1, r3
	ldrb	r3, [r2]	@ zero_extendqisi2
	ldrb	r1, [r2, #1]	@ zero_extendqisi2
	lsl	r1, r1, #8
	orr	r3, r1, r3
	ldrb	r2, [r2, #2]	@ zero_extendqisi2
	lsl	r2, r2, #16
	orr	r2, r2, r3
	mov	r3, #0
	bfi	r3, r2, #0, #24
	mov	r0, r3
	bl	convert_to_ycc
	vmov.f32	s13, s0
	vmov.f32	s14, s1
	vmov.f32	s15, s2
	vstr.32	s13, [r4]
	vstr.32	s14, [r4, #4]
	vstr.32	s15, [r4, #8]
	ldr	r3, [fp, #-20]
	add	r3, r3, #1
	str	r3, [fp, #-20]
.L29:
	ldr	r2, [fp, #-20]
	ldr	r3, [fp, #-48]
	cmp	r2, r3
	blt	.L30
	ldr	r3, [fp, #-16]
	add	r3, r3, #1
	str	r3, [fp, #-16]
.L28:
	ldr	r2, [fp, #-16]
	ldr	r3, [fp, #-44]
	cmp	r2, r3
	blt	.L31
	ldr	r3, [fp, #-28]
	mov	r0, r3
	sub	sp, fp, #8
	@ sp needed
	pop	{r4, fp, pc}
	.size	rgb_to_ycc, .-rgb_to_ycc
	.align	2
	.global	ycc_to_intermediary
	.syntax unified
	.arm
	.fpu vfpv3-d16
	.type	ycc_to_intermediary, %function
ycc_to_intermediary:
	@ args = 0, pretend = 0, frame = 64
	@ frame_needed = 1, uses_anonymous_args = 0
	push	{r4, r5, fp, lr}
	add	fp, sp, #12
	sub	sp, sp, #72
	str	r0, [fp, #-40]
	str	r1, [fp, #-44]
	str	r2, [fp, #-48]
	ldr	r3, [fp, #-44]
	ldr	r2, [fp, #-48]
	mul	r3, r2, r3
	str	r3, [fp, #-24]
	mov	r0, #4
	bl	malloc
	mov	r3, r0
	str	r3, [fp, #-28]
	ldr	r2, [fp, #-24]
	mov	r3, r2
	lsl	r3, r3, #1
	add	r3, r3, r2
	lsl	r3, r3, #3
	lsr	r3, r3, #2
	mov	r0, r3
	bl	malloc
	mov	r3, r0
	mov	r2, r3
	ldr	r3, [fp, #-28]
	str	r2, [r3]
	mov	r3, #0
	str	r3, [fp, #-16]
	b	.L34
.L37:
	mov	r3, #0
	str	r3, [fp, #-20]
	b	.L35
.L36:
	ldr	r3, [fp, #-16]
	ldr	r2, [fp, #-48]
	mul	r3, r2, r3
	lsr	r2, r3, #31
	add	r3, r2, r3
	asr	r3, r3, #1
	str	r3, [fp, #-32]
	ldr	r3, [fp, #-16]
	ldr	r2, [fp, #-48]
	mul	r2, r2, r3
	ldr	r3, [fp, #-20]
	add	r3, r2, r3
	lsl	r3, r3, #1
	str	r3, [fp, #-36]
	ldr	r3, [fp, #-40]
	ldr	r1, [r3]
	ldr	r2, [fp, #-36]
	mov	r3, r2
	lsl	r3, r3, #1
	add	r3, r3, r2
	lsl	r3, r3, #2
	add	ip, r1, r3
	ldr	r3, [fp, #-40]
	ldr	r1, [r3]
	ldr	r3, [fp, #-36]
	add	r2, r3, #1
	mov	r3, r2
	lsl	r3, r3, #1
	add	r3, r3, r2
	lsl	r3, r3, #2
	add	lr, r1, r3
	ldr	r3, [fp, #-40]
	ldr	r2, [r3]
	ldr	r1, [fp, #-36]
	ldr	r3, [fp, #-48]
	add	r3, r1, r3
	mov	r1, r3
	mov	r3, r1
	lsl	r3, r3, #1
	add	r3, r3, r1
	lsl	r3, r3, #2
	add	r5, r2, r3
	ldr	r3, [fp, #-40]
	ldr	r2, [r3]
	ldr	r3, [fp, #-36]
	add	r1, r3, #1
	ldr	r3, [fp, #-48]
	add	r3, r1, r3
	mov	r1, r3
	mov	r3, r1
	lsl	r3, r3, #1
	add	r3, r3, r1
	lsl	r3, r3, #2
	add	r2, r2, r3
	ldr	r3, [fp, #-28]
	ldr	r1, [r3]
	ldr	r0, [fp, #-32]
	ldr	r3, [fp, #-20]
	add	r3, r0, r3
	mov	r0, r3
	mov	r3, r0
	lsl	r3, r3, #1
	add	r3, r3, r0
	lsl	r3, r3, #3
	add	r4, r1, r3
	sub	r0, fp, #76
	str	r2, [sp]
	mov	r3, r5
	mov	r2, lr
	mov	r1, ip
	bl	downsample_ycc
	mov	lr, r4
	sub	ip, fp, #76
	ldmia	ip!, {r0, r1, r2, r3}
	stmia	lr!, {r0, r1, r2, r3}
	ldm	ip, {r0, r1}
	stm	lr, {r0, r1}
	ldr	r3, [fp, #-20]
	add	r3, r3, #1
	str	r3, [fp, #-20]
.L35:
	ldr	r3, [fp, #-48]
	lsr	r2, r3, #31
	add	r3, r2, r3
	asr	r3, r3, #1
	mov	r2, r3
	ldr	r3, [fp, #-20]
	cmp	r3, r2
	blt	.L36
	ldr	r3, [fp, #-16]
	add	r3, r3, #1
	str	r3, [fp, #-16]
.L34:
	ldr	r3, [fp, #-44]
	lsr	r2, r3, #31
	add	r3, r2, r3
	asr	r3, r3, #1
	mov	r2, r3
	ldr	r3, [fp, #-16]
	cmp	r3, r2
	blt	.L37
	ldr	r3, [fp, #-28]
	mov	r0, r3
	sub	sp, fp, #12
	@ sp needed
	pop	{r4, r5, fp, pc}
	.size	ycc_to_intermediary, .-ycc_to_intermediary
	.align	2
	.global	intermediary_to_ycc
	.syntax unified
	.arm
	.fpu vfpv3-d16
	.type	intermediary_to_ycc, %function
intermediary_to_ycc:
	@ args = 0, pretend = 0, frame = 88
	@ frame_needed = 1, uses_anonymous_args = 0
	push	{fp, lr}
	add	fp, sp, #4
	sub	sp, sp, #88
	str	r0, [fp, #-80]
	str	r1, [fp, #-84]
	str	r2, [fp, #-88]
	ldr	r3, [fp, #-84]
	ldr	r2, [fp, #-88]
	mul	r3, r2, r3
	str	r3, [fp, #-16]
	mov	r0, #4
	bl	malloc
	mov	r3, r0
	str	r3, [fp, #-20]
	ldr	r2, [fp, #-16]
	mov	r3, r2
	lsl	r3, r3, #1
	add	r3, r3, r2
	lsl	r3, r3, #2
	mov	r0, r3
	bl	malloc
	mov	r3, r0
	mov	r2, r3
	ldr	r3, [fp, #-20]
	str	r2, [r3]
	mov	r3, #0
	str	r3, [fp, #-8]
	b	.L40
.L43:
	mov	r3, #0
	str	r3, [fp, #-12]
	b	.L41
.L42:
	ldr	r3, [fp, #-8]
	ldr	r2, [fp, #-88]
	mul	r3, r2, r3
	lsr	r2, r3, #31
	add	r3, r2, r3
	asr	r3, r3, #1
	str	r3, [fp, #-24]
	ldr	r3, [fp, #-8]
	ldr	r2, [fp, #-88]
	mul	r2, r2, r3
	ldr	r3, [fp, #-12]
	add	r3, r2, r3
	lsl	r3, r3, #1
	str	r3, [fp, #-28]
	ldr	r3, [fp, #-80]
	ldr	r2, [r3]
	ldr	r1, [fp, #-24]
	ldr	r3, [fp, #-12]
	add	r3, r1, r3
	mov	r1, r3
	mov	r3, r1
	lsl	r3, r3, #1
	add	r3, r3, r1
	lsl	r3, r3, #3
	add	r2, r2, r3
	sub	r3, fp, #76
	mov	r1, r2
	mov	r0, r3
	bl	upsample_ycc
	ldr	r3, [fp, #-20]
	ldr	r1, [r3]
	ldr	r2, [fp, #-28]
	mov	r3, r2
	lsl	r3, r3, #1
	add	r3, r3, r2
	lsl	r3, r3, #2
	add	r3, r1, r3
	mov	ip, r3
	sub	r3, fp, #76
	ldm	r3, {r0, r1, r2}
	stm	ip, {r0, r1, r2}
	ldr	r3, [fp, #-20]
	ldr	r1, [r3]
	ldr	r3, [fp, #-28]
	add	r2, r3, #1
	mov	r3, r2
	lsl	r3, r3, #1
	add	r3, r3, r2
	lsl	r3, r3, #2
	add	r3, r1, r3
	mov	ip, r3
	sub	r3, fp, #64
	ldm	r3, {r0, r1, r2}
	stm	ip, {r0, r1, r2}
	ldr	r3, [fp, #-20]
	ldr	r2, [r3]
	ldr	r1, [fp, #-28]
	ldr	r3, [fp, #-88]
	add	r3, r1, r3
	mov	r1, r3
	mov	r3, r1
	lsl	r3, r3, #1
	add	r3, r3, r1
	lsl	r3, r3, #2
	add	r3, r2, r3
	mov	ip, r3
	sub	r3, fp, #52
	ldm	r3, {r0, r1, r2}
	stm	ip, {r0, r1, r2}
	ldr	r3, [fp, #-20]
	ldr	r2, [r3]
	ldr	r3, [fp, #-28]
	add	r1, r3, #1
	ldr	r3, [fp, #-88]
	add	r3, r1, r3
	mov	r1, r3
	mov	r3, r1
	lsl	r3, r3, #1
	add	r3, r3, r1
	lsl	r3, r3, #2
	add	r3, r2, r3
	mov	ip, r3
	sub	r3, fp, #40
	ldm	r3, {r0, r1, r2}
	stm	ip, {r0, r1, r2}
	ldr	r3, [fp, #-12]
	add	r3, r3, #1
	str	r3, [fp, #-12]
.L41:
	ldr	r3, [fp, #-88]
	lsr	r2, r3, #31
	add	r3, r2, r3
	asr	r3, r3, #1
	mov	r2, r3
	ldr	r3, [fp, #-12]
	cmp	r3, r2
	blt	.L42
	ldr	r3, [fp, #-8]
	add	r3, r3, #1
	str	r3, [fp, #-8]
.L40:
	ldr	r3, [fp, #-84]
	lsr	r2, r3, #31
	add	r3, r2, r3
	asr	r3, r3, #1
	mov	r2, r3
	ldr	r3, [fp, #-8]
	cmp	r3, r2
	blt	.L43
	ldr	r3, [fp, #-20]
	mov	r0, r3
	sub	sp, fp, #4
	@ sp needed
	pop	{fp, pc}
	.size	intermediary_to_ycc, .-intermediary_to_ycc
	.align	2
	.global	ycc_to_rgb
	.syntax unified
	.arm
	.fpu vfpv3-d16
	.type	ycc_to_rgb, %function
ycc_to_rgb:
	@ args = 0, pretend = 0, frame = 40
	@ frame_needed = 1, uses_anonymous_args = 0
	push	{r4, fp, lr}
	add	fp, sp, #8
	sub	sp, sp, #44
	str	r0, [fp, #-40]
	str	r1, [fp, #-44]
	str	r2, [fp, #-48]
	ldr	r3, [fp, #-44]
	ldr	r2, [fp, #-48]
	mul	r3, r2, r3
	str	r3, [fp, #-24]
	mov	r0, #4
	bl	malloc
	mov	r3, r0
	str	r3, [fp, #-28]
	ldr	r2, [fp, #-24]
	mov	r3, r2
	lsl	r3, r3, #1
	add	r3, r3, r2
	mov	r0, r3
	bl	malloc
	mov	r3, r0
	mov	r2, r3
	ldr	r3, [fp, #-28]
	str	r2, [r3]
	mov	r3, #0
	str	r3, [fp, #-16]
	b	.L46
.L49:
	mov	r3, #0
	str	r3, [fp, #-20]
	b	.L47
.L48:
	ldr	r3, [fp, #-16]
	ldr	r2, [fp, #-48]
	mul	r3, r2, r3
	str	r3, [fp, #-32]
	ldr	r3, [fp, #-40]
	ldr	r2, [r3]
	ldr	r1, [fp, #-32]
	ldr	r3, [fp, #-20]
	add	r3, r1, r3
	mov	r1, r3
	mov	r3, r1
	lsl	r3, r3, #1
	add	r3, r3, r1
	lsl	r3, r3, #2
	add	r0, r2, r3
	ldr	r3, [fp, #-28]
	ldr	r2, [r3]
	ldr	r1, [fp, #-32]
	ldr	r3, [fp, #-20]
	add	r3, r1, r3
	mov	r1, r3
	mov	r3, r1
	lsl	r3, r3, #1
	add	r3, r3, r1
	add	r4, r2, r3
	bl	convert_to_rgb
	mov	r3, r0
	mov	r2, r3
	strb	r2, [r4]
	ubfx	r2, r3, #8, #8
	strb	r2, [r4, #1]
	ubfx	r3, r3, #16, #8
	strb	r3, [r4, #2]
	ldr	r3, [fp, #-20]
	add	r3, r3, #1
	str	r3, [fp, #-20]
.L47:
	ldr	r2, [fp, #-20]
	ldr	r3, [fp, #-48]
	cmp	r2, r3
	blt	.L48
	ldr	r3, [fp, #-16]
	add	r3, r3, #1
	str	r3, [fp, #-16]
.L46:
	ldr	r2, [fp, #-16]
	ldr	r3, [fp, #-44]
	cmp	r2, r3
	blt	.L49
	ldr	r3, [fp, #-28]
	mov	r0, r3
	sub	sp, fp, #8
	@ sp needed
	pop	{r4, fp, pc}
	.size	ycc_to_rgb, .-ycc_to_rgb
	.section	.rodata
	.align	2
.LC0:
	.ascii	"rb\000"
	.align	2
.LC1:
	.ascii	"input_test.raw\000"
	.align	2
.LC2:
	.ascii	"Input File error\000"
	.align	2
.LC3:
	.ascii	"wb\000"
	.align	2
.LC4:
	.ascii	"input_test_converted.raw\000"
	.align	2
.LC5:
	.ascii	"Output File error\000"
	.text
	.align	2
	.global	main
	.syntax unified
	.arm
	.fpu vfpv3-d16
	.type	main, %function
main:
	@ args = 0, pretend = 0, frame = 56
	@ frame_needed = 1, uses_anonymous_args = 0
	push	{fp, lr}
	add	fp, sp, #4
	sub	sp, sp, #56
	str	r0, [fp, #-56]
	str	r1, [fp, #-60]
	movw	r1, #:lower16:.LC0
	movt	r1, #:upper16:.LC0
	movw	r0, #:lower16:.LC1
	movt	r0, #:upper16:.LC1
	bl	fopen
	str	r0, [fp, #-12]
	ldr	r3, [fp, #-12]
	cmp	r3, #0
	bne	.L52
	movw	r0, #:lower16:.LC2
	movt	r0, #:upper16:.LC2
	bl	printf
	mov	r0, #1
	bl	exit
.L52:
	movw	r1, #:lower16:.LC3
	movt	r1, #:upper16:.LC3
	movw	r0, #:lower16:.LC4
	movt	r0, #:upper16:.LC4
	bl	fopen
	str	r0, [fp, #-16]
	ldr	r3, [fp, #-16]
	cmp	r3, #0
	bne	.L53
	movw	r0, #:lower16:.LC5
	movt	r0, #:upper16:.LC5
	bl	printf
	mov	r0, #1
	bl	exit
.L53:
	mov	r3, #100
	str	r3, [fp, #-20]
	mov	r3, #100
	str	r3, [fp, #-24]
	ldr	r3, [fp, #-20]
	ldr	r2, [fp, #-24]
	mul	r3, r2, r3
	str	r3, [fp, #-28]
	mov	r0, #4
	bl	malloc
	mov	r3, r0
	str	r3, [fp, #-32]
	ldr	r2, [fp, #-28]
	mov	r3, r2
	lsl	r3, r3, #1
	add	r3, r3, r2
	mov	r0, r3
	bl	malloc
	mov	r3, r0
	mov	r2, r3
	ldr	r3, [fp, #-32]
	str	r2, [r3]
	ldr	r3, [fp, #-32]
	ldr	r0, [r3]
	ldr	r2, [fp, #-28]
	ldr	r3, [fp, #-12]
	mov	r1, #3
	bl	fread
	ldr	r2, [fp, #-20]
	ldr	r1, [fp, #-24]
	ldr	r0, [fp, #-32]
	bl	rgb_to_ycc
	str	r0, [fp, #-36]
	ldr	r2, [fp, #-20]
	ldr	r1, [fp, #-24]
	ldr	r0, [fp, #-36]
	bl	ycc_to_intermediary
	str	r0, [fp, #-40]
	ldr	r2, [fp, #-20]
	ldr	r1, [fp, #-24]
	ldr	r0, [fp, #-40]
	bl	intermediary_to_ycc
	str	r0, [fp, #-44]
	ldr	r2, [fp, #-20]
	ldr	r1, [fp, #-24]
	ldr	r0, [fp, #-44]
	bl	ycc_to_rgb
	str	r0, [fp, #-48]
	mov	r3, #0
	str	r3, [fp, #-8]
	b	.L54
.L55:
	ldr	r3, [fp, #-48]
	ldr	r1, [r3]
	ldr	r2, [fp, #-8]
	mov	r3, r2
	lsl	r3, r3, #1
	add	r3, r3, r2
	add	r3, r1, r3
	mov	r0, r3
	ldr	r3, [fp, #-16]
	mov	r2, #1
	mov	r1, #1
	bl	fwrite
	ldr	r3, [fp, #-48]
	ldr	r1, [r3]
	ldr	r2, [fp, #-8]
	mov	r3, r2
	lsl	r3, r3, #1
	add	r3, r3, r2
	add	r3, r1, r3
	add	r0, r3, #1
	ldr	r3, [fp, #-16]
	mov	r2, #1
	mov	r1, #1
	bl	fwrite
	ldr	r3, [fp, #-48]
	ldr	r1, [r3]
	ldr	r2, [fp, #-8]
	mov	r3, r2
	lsl	r3, r3, #1
	add	r3, r3, r2
	add	r3, r1, r3
	add	r0, r3, #2
	ldr	r3, [fp, #-16]
	mov	r2, #1
	mov	r1, #1
	bl	fwrite
	ldr	r3, [fp, #-8]
	add	r3, r3, #1
	str	r3, [fp, #-8]
.L54:
	ldr	r2, [fp, #-8]
	ldr	r3, [fp, #-28]
	cmp	r2, r3
	blt	.L55
	ldr	r0, [fp, #-16]
	bl	fclose
	ldr	r0, [fp, #-12]
	bl	fclose
	mov	r3, #0
	mov	r0, r3
	sub	sp, fp, #4
	@ sp needed
	pop	{fp, pc}
	.size	main, .-main
	.ident	"GCC: (GNU) 8.2.1 20180801 (Red Hat 8.2.1-2)"
	.section	.note.GNU-stack,"",%progbits
